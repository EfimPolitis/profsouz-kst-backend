generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId     String    @id @default(uuid()) @map("user_id")
  email      String    @map("email")
  firstName  String    @map("first_name")
  lastName   String    @map("last_name")
  middleName String    @map("middle_name")
  userName   String?   @unique @map("user_name")
  password   String    @map("password")
  role       EUserRole @default(USER) @map("role")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("update_at")

  application Application[]
  reservation ReservationList[]
  comment     Comment[]
  sender      Feedback[]        @relation("sender")
  recipient   Feedback[]        @relation("recipient")
}

model Events {
  eventId      String   @id @default(uuid())
  title        String   @unique
  description  String
  imageUrl     String   @map("image_url")
  link         String
  date         String   @default("")
  totalTickets Int      @map("total_tickets")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  categories  CategoriesList[]
  application Application[]
  reservation ReservationList[]
}

model Category {
  id    String @id @default(uuid())
  name  String
  color String

  categories CategoriesList[]
}

model CategoriesList {
  eventId String @map("event_id")
  events  Events @relation(fields: [eventId], references: [eventId], onDelete: Cascade)

  categoryId String   @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now()) @map("assigned_at")

  @@id([eventId, categoryId])
}

model Application {
  id           String   @id @default(uuid())
  ticketsCount Int      @map("tickets_count")
  status       EStatus  @default(PENDING)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()

  user   User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId String

  events  Events @relation(fields: [eventId], references: [eventId], onDelete: Cascade)
  eventId String
}

model ReservationList {
  id           String   @id @default(uuid())
  ticketsCount Int      @map("tickets_count")
  createdAt    DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId String

  events  Events @relation(fields: [eventId], references: [eventId], onDelete: Cascade)
  eventId String
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [userId])
  userId String
}

model Feedback {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  sender   User   @relation(name: "sender", fields: [senderId], references: [userId])
  senderId String @map("sender_id")

  recipient   User   @relation(name: "recipient", fields: [recipientId], references: [userId])
  recipientId String @map("recipient_id")
}

enum EUserRole {
  ADMIN
  USER
}

enum EStatus {
  PENDING
  APPROVED
  REJECTED
}
